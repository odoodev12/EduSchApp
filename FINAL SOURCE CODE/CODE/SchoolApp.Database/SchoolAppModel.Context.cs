//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace SchoolApp.Database
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class SchoolAppEntities : DbContext
    {
        public SchoolAppEntities()
            : base("name=SchoolAppEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<ISAccountStatu> ISAccountStatus { get; set; }
        public virtual DbSet<ISAdminLogin> ISAdminLogins { get; set; }
        public virtual DbSet<ISAttendance> ISAttendances { get; set; }
        public virtual DbSet<ISAuthToken> ISAuthTokens { get; set; }
        public virtual DbSet<ISClass> ISClasses { get; set; }
        public virtual DbSet<ISClassType> ISClassTypes { get; set; }
        public virtual DbSet<ISClassYear> ISClassYears { get; set; }
        public virtual DbSet<ISCompleteAttendanceRun> ISCompleteAttendanceRuns { get; set; }
        public virtual DbSet<ISCompletePickupRun> ISCompletePickupRuns { get; set; }
        public virtual DbSet<ISCountry> ISCountries { get; set; }
        public virtual DbSet<ISDataUploadHistory> ISDataUploadHistories { get; set; }
        public virtual DbSet<ISErrorLog> ISErrorLogs { get; set; }
        public virtual DbSet<ISFAQ> ISFAQs { get; set; }
        public virtual DbSet<ISHoliday> ISHolidays { get; set; }
        public virtual DbSet<ISInvoice> ISInvoices { get; set; }
        public virtual DbSet<ISLogType> ISLogTypes { get; set; }
        public virtual DbSet<ISMessage> ISMessages { get; set; }
        public virtual DbSet<ISOrganisationUser> ISOrganisationUsers { get; set; }
        public virtual DbSet<ISPayment> ISPayments { get; set; }
        public virtual DbSet<ISPicker> ISPickers { get; set; }
        public virtual DbSet<ISPickerAssignment> ISPickerAssignments { get; set; }
        public virtual DbSet<ISPickup> ISPickups { get; set; }
        public virtual DbSet<ISPickUpMessage> ISPickUpMessages { get; set; }
        public virtual DbSet<ISPickUpStatu> ISPickUpStatus { get; set; }
        public virtual DbSet<ISReport> ISReports { get; set; }
        public virtual DbSet<ISRole> ISRoles { get; set; }
        public virtual DbSet<ISSchool> ISSchools { get; set; }
        public virtual DbSet<ISSchoolClass> ISSchoolClasses { get; set; }
        public virtual DbSet<ISSchoolInvoice> ISSchoolInvoices { get; set; }
        public virtual DbSet<ISSchoolType> ISSchoolTypes { get; set; }
        public virtual DbSet<ISStudent> ISStudents { get; set; }
        public virtual DbSet<ISStudentHistory> ISStudentHistories { get; set; }
        public virtual DbSet<ISStudentReassignHistory> ISStudentReassignHistories { get; set; }
        public virtual DbSet<ISSupport> ISSupports { get; set; }
        public virtual DbSet<ISSupportStatu> ISSupportStatus { get; set; }
        public virtual DbSet<ISTeacher> ISTeachers { get; set; }
        public virtual DbSet<ISTeacherClassAssignment> ISTeacherClassAssignments { get; set; }
        public virtual DbSet<ISTeacherReassignHistory> ISTeacherReassignHistories { get; set; }
        public virtual DbSet<ISTicketMessage> ISTicketMessages { get; set; }
        public virtual DbSet<ISTrasectionStatu> ISTrasectionStatus { get; set; }
        public virtual DbSet<ISTrasectionType> ISTrasectionTypes { get; set; }
        public virtual DbSet<ISUserActivity> ISUserActivities { get; set; }
        public virtual DbSet<ISUserRole> ISUserRoles { get; set; }
        public virtual DbSet<ViewNotAssignPicker> ViewNotAssignPickers { get; set; }
        public virtual DbSet<ViewStudentAttendence> ViewStudentAttendences { get; set; }
        public virtual DbSet<ViewStudentPickUp> ViewStudentPickUps { get; set; }
        public virtual DbSet<EmailTemplate> EmailTemplates { get; set; }
        public virtual DbSet<BckupParent> BckupParents { get; set; }
        public virtual DbSet<ISStudentConfirmLogin> ISStudentConfirmLogins { get; set; }
        public virtual DbSet<ISRequestDemo> ISRequestDemoes { get; set; }
        public virtual DbSet<Notifaction> Notifactions { get; set; }
        public virtual DbSet<RecieverGroup> RecieverGroups { get; set; }
        public virtual DbSet<ISRegistration> ISRegistrations { get; set; }
    
        public virtual ObjectResult<getAttandanceData_Result> getAttandanceData(Nullable<System.DateTime> date)
        {
            var dateParameter = date.HasValue ?
                new ObjectParameter("date", date) :
                new ObjectParameter("date", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<getAttandanceData_Result>("getAttandanceData", dateParameter);
        }
    
        public virtual ObjectResult<getClassReport_Result> getClassReport(Nullable<int> classID)
        {
            var classIDParameter = classID.HasValue ?
                new ObjectParameter("ClassID", classID) :
                new ObjectParameter("ClassID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<getClassReport_Result>("getClassReport", classIDParameter);
        }
    
        public virtual ObjectResult<getStudentReport_Result> getStudentReport(string parantEmail1, string parantEmail2)
        {
            var parantEmail1Parameter = parantEmail1 != null ?
                new ObjectParameter("ParantEmail1", parantEmail1) :
                new ObjectParameter("ParantEmail1", typeof(string));
    
            var parantEmail2Parameter = parantEmail2 != null ?
                new ObjectParameter("ParantEmail2", parantEmail2) :
                new ObjectParameter("ParantEmail2", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<getStudentReport_Result>("getStudentReport", parantEmail1Parameter, parantEmail2Parameter);
        }
    
        public virtual ObjectResult<getTeacherPickUpData_Result> getTeacherPickUpData(Nullable<System.DateTime> fromdate, Nullable<System.DateTime> todate)
        {
            var fromdateParameter = fromdate.HasValue ?
                new ObjectParameter("fromdate", fromdate) :
                new ObjectParameter("fromdate", typeof(System.DateTime));
    
            var todateParameter = todate.HasValue ?
                new ObjectParameter("todate", todate) :
                new ObjectParameter("todate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<getTeacherPickUpData_Result>("getTeacherPickUpData", fromdateParameter, todateParameter);
        }
    
        public virtual ObjectResult<getPickUpData_Result> getPickUpData(Nullable<System.DateTime> date)
        {
            var dateParameter = date.HasValue ?
                new ObjectParameter("date", date) :
                new ObjectParameter("date", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<getPickUpData_Result>("getPickUpData", dateParameter);
        }
    
        public virtual int updateParantEmailIdInWhole(string oldEmailID, string newEmailID, string parentName)
        {
            var oldEmailIDParameter = oldEmailID != null ?
                new ObjectParameter("oldEmailID", oldEmailID) :
                new ObjectParameter("oldEmailID", typeof(string));
    
            var newEmailIDParameter = newEmailID != null ?
                new ObjectParameter("newEmailID", newEmailID) :
                new ObjectParameter("newEmailID", typeof(string));
    
            var parentNameParameter = parentName != null ?
                new ObjectParameter("parentName", parentName) :
                new ObjectParameter("parentName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("updateParantEmailIdInWhole", oldEmailIDParameter, newEmailIDParameter, parentNameParameter);
        }
    
        public virtual int BusinessRuleClearData()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("BusinessRuleClearData");
        }
    
        public virtual ObjectResult<GetDataForChartControl_Result> GetDataForChartControl(Nullable<int> schoolId)
        {
            var schoolIdParameter = schoolId.HasValue ?
                new ObjectParameter("schoolId", schoolId) :
                new ObjectParameter("schoolId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetDataForChartControl_Result>("GetDataForChartControl", schoolIdParameter);
        }
    }
}
